name: Code Quality Checks

on:
  pull_request:
    branches: ["main"]

jobs:
  pest-tests:
    name: Pest (${{ matrix.suite }})
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: symfony
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: symfony_test
        options: >-
          --health-cmd="pg_isready -U symfony"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    strategy:
      matrix:
        suite: [unit, functional, integration]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          coverage: none
          extensions: mbstring, pdo, pdo_pgsql

      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist

      - name: Set DATABASE_URL env
        run: echo "DATABASE_URL=pgsql://symfony:secret@localhost:5432/symfony_test" >> $GITHUB_ENV

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -U symfony; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done

      - name: Prepare test database (optional)
        run: |
          php bin/console doctrine:database:create --env=test || true
          php bin/console doctrine:schema:create --env=test

      - name: Run Pest Suite
        run: vendor/bin/pest --testsuite=${{ matrix.suite }}

  static-analysis:
    name: PHPStan & PHPCS
    runs-on: ubuntu-latest
    needs: pest-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          tools: phpstan, phpcs

      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist

      - name: Run PHPStan
        run: vendor/bin/phpstan analyse

      - name: Run PHPCS
        run: vendor/bin/phpcs